
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.StudioOwnerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  phone: 'phone',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.EmailVerificationTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  email: 'email',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  email: 'email',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.StudioScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  phone: 'phone',
  email: 'email',
  latitude: 'latitude',
  longitude: 'longitude',
  openingHours: 'openingHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  studioId: 'studioId',
  name: 'name',
  description: 'description',
  price: 'price',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  studioId: 'studioId',
  serviceId: 'serviceId',
  customerId: 'customerId',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerPhone: 'customerPhone',
  preferredDate: 'preferredDate',
  preferredTime: 'preferredTime',
  message: 'message',
  explicitHealthConsent: 'explicitHealthConsent',
  healthConsentGivenAt: 'healthConsentGivenAt',
  healthConsentText: 'healthConsentText',
  healthConsentWithdrawnAt: 'healthConsentWithdrawnAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  name: 'name',
  phone: 'phone',
  image: 'image',
  primaryRole: 'primaryRole',
  isActive: 'isActive',
  isSuspended: 'isSuspended',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.NewSessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserRoleAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  role: 'role',
  studioId: 'studioId',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.StudioOwnershipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  studioId: 'studioId',
  canTransfer: 'canTransfer',
  invitedBy: 'invitedBy',
  invitedAt: 'invitedAt',
  acceptedAt: 'acceptedAt'
};

exports.Prisma.MagicLinkTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  email: 'email',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.NewBookingScalarFieldEnum = {
  id: 'id',
  studioId: 'studioId',
  serviceId: 'serviceId',
  customerId: 'customerId',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerPhone: 'customerPhone',
  preferredDate: 'preferredDate',
  preferredTime: 'preferredTime',
  message: 'message',
  explicitHealthConsent: 'explicitHealthConsent',
  healthConsentGivenAt: 'healthConsentGivenAt',
  healthConsentText: 'healthConsentText',
  healthConsentWithdrawnAt: 'healthConsentWithdrawnAt',
  status: 'status',
  confirmedBy: 'confirmedBy',
  confirmedAt: 'confirmedAt',
  cancelledBy: 'cancelledBy',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.TimeSlotScalarFieldEnum = {
  id: 'id',
  studioId: 'studioId',
  serviceId: 'serviceId',
  startTime: 'startTime',
  endTime: 'endTime',
  isAvailable: 'isAvailable',
  isBooked: 'isBooked',
  bookingId: 'bookingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlockedTimeScalarFieldEnum = {
  id: 'id',
  studioId: 'studioId',
  startTime: 'startTime',
  endTime: 'endTime',
  reason: 'reason',
  isAllDay: 'isAllDay',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED'
};

exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  STUDIO_OWNER: 'STUDIO_OWNER',
  CUSTOMER: 'CUSTOMER',
  GUEST: 'GUEST'
};

exports.Prisma.ModelName = {
  StudioOwner: 'StudioOwner',
  Customer: 'Customer',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  EmailVerificationToken: 'EmailVerificationToken',
  PasswordResetToken: 'PasswordResetToken',
  Studio: 'Studio',
  Service: 'Service',
  Booking: 'Booking',
  User: 'User',
  NewAccount: 'NewAccount',
  NewSession: 'NewSession',
  UserRoleAssignment: 'UserRoleAssignment',
  StudioOwnership: 'StudioOwnership',
  MagicLinkToken: 'MagicLinkToken',
  NewBooking: 'NewBooking',
  AuditLog: 'AuditLog',
  TimeSlot: 'TimeSlot',
  BlockedTime: 'BlockedTime'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/roman/Development/massava/app/generated/app/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/roman/Development/massava/app/generated/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Copyright (c) 2025 Roman Reinelt / RNLT Labs\n// All rights reserved.\n//\n// Massava - Database Schema\n// Booking platform for massage studios\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../app/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ============================================\n// NextAuth.js Models\n// ============================================\n\nmodel StudioOwner {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String    @unique\n  emailVerified DateTime?\n  password      String? // Hashed password for credentials login\n  image         String?\n\n  // Relations (legacy - being phased out)\n  accounts Account[]\n  sessions Session[]\n  // studios relation removed - use User -> StudioOwnership instead\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"studio_owners\")\n}\n\nmodel Customer {\n  id            String    @id @default(cuid())\n  name          String\n  email         String    @unique\n  emailVerified DateTime?\n  password      String? // Hashed password for credentials login\n  phone         String?\n  image         String?\n\n  // Relations\n  bookings  Booking[]\n  favorites Studio[]  @relation(\"CustomerFavorites\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"customers\")\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String? @db.Text\n  access_token      String? @db.Text\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String? @db.Text\n  session_state     String?\n\n  user StudioOwner @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@map(\"accounts\")\n}\n\nmodel Session {\n  id           String      @id @default(cuid())\n  sessionToken String      @unique\n  userId       String\n  expires      DateTime\n  user         StudioOwner @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"sessions\")\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n  @@map(\"verification_tokens\")\n}\n\n// Email Verification Token\n// For verifying email addresses during registration\nmodel EmailVerificationToken {\n  id        String   @id @default(cuid())\n  token     String   @unique // 64 hex chars (32 bytes)\n  email     String\n  expiresAt DateTime // 24 hours from creation\n  used      Boolean  @default(false) // One-time use\n\n  createdAt DateTime @default(now())\n\n  @@index([email])\n  @@index([token])\n  @@index([expiresAt])\n  @@map(\"email_verification_tokens\")\n}\n\n// Password Reset Token Model\nmodel PasswordResetToken {\n  id        String   @id @default(cuid())\n  token     String   @unique // 64 hex chars (32 bytes)\n  email     String\n  expiresAt DateTime // 1 hour from creation\n  used      Boolean  @default(false) // One-time use\n\n  createdAt DateTime @default(now())\n\n  @@index([email])\n  @@index([token])\n  @@index([expiresAt])\n  @@map(\"password_reset_tokens\")\n}\n\n// Studio Model\n// Represents a massage/wellness studio\nmodel Studio {\n  id          String  @id @default(cuid())\n  name        String\n  description String? @db.Text\n\n  // Contact Information\n  address    String\n  city       String\n  postalCode String?\n  phone      String\n  email      String\n\n  // Geolocation for radius-based search\n  latitude  Float?\n  longitude Float?\n\n  // Business Hours (stored as JSON)\n  // Example: {\"monday\": \"09:00-18:00\", \"tuesday\": \"09:00-18:00\", ...}\n  openingHours Json?\n\n  // Relations\n  services    Service[]\n  bookings    Booking[]\n  favoritedBy Customer[] @relation(\"CustomerFavorites\")\n  timeSlots   TimeSlot[] // Available appointment slots\n\n  // New unified relations (Phase 3)\n  newFavoritedBy  User[]               @relation(\"UserFavorites\")\n  ownerships      StudioOwnership[] // Multiple owners possible via User model\n  roleAssignments UserRoleAssignment[]\n  newBookings     NewBooking[]\n  blockedTimes    BlockedTime[] // Time blocking for calendar\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([city])\n  @@index([latitude, longitude])\n  @@map(\"studios\")\n}\n\n// Service Model\n// Represents a service offered by a studio (e.g., \"Thai Massage 60min\")\nmodel Service {\n  id       String @id @default(cuid())\n  studioId String\n\n  name        String\n  description String? @db.Text\n  price       Float // Price in EUR\n  duration    Int // Duration in minutes\n\n  // Relations\n  studio      Studio       @relation(fields: [studioId], references: [id], onDelete: Cascade)\n  bookings    Booking[]\n  newBookings NewBooking[]\n  timeSlots   TimeSlot[] // Available time slots for this service\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([studioId])\n  @@map(\"services\")\n}\n\n// Booking Model\n// Represents a booking request from a customer\nmodel Booking {\n  id         String  @id @default(cuid())\n  studioId   String\n  serviceId  String? // Optional: customer might not know exact service\n  customerId String? // Optional: linked to customer account if they have one\n\n  // Customer Information (always stored, even if they have account)\n  customerName  String\n  customerEmail String\n  customerPhone String\n\n  // Booking Details\n  preferredDate String // Customer's preferred date (text: \"Next Monday\", \"15.11.2025\")\n  preferredTime String // Customer's preferred time (text: \"afternoon\", \"14:00\")\n  message       String? @db.Text // Additional notes/requests\n\n  // GDPR Art. 9 Compliance (Health Data)\n  // Special category data requires explicit consent\n  explicitHealthConsent    Boolean?  @default(false)\n  healthConsentGivenAt     DateTime?\n  healthConsentText        String?   @db.Text // Record of consent text shown to user\n  healthConsentWithdrawnAt DateTime?\n\n  // Status\n  status BookingStatus @default(PENDING)\n\n  // Relations\n  studio   Studio    @relation(fields: [studioId], references: [id], onDelete: Cascade)\n  service  Service?  @relation(fields: [serviceId], references: [id], onDelete: SetNull)\n  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([studioId])\n  @@index([customerId])\n  @@index([customerEmail])\n  @@index([status])\n  @@index([createdAt])\n  @@map(\"bookings\")\n}\n\n// Booking Status Enum\nenum BookingStatus {\n  PENDING // Waiting for studio confirmation\n  CONFIRMED // Studio confirmed the booking\n  CANCELLED // Booking was cancelled\n}\n\n// ============================================\n// Phase 3: Unified User Model + RBAC\n// ============================================\n\n// User Role Enum\nenum UserRole {\n  SUPER_ADMIN\n  STUDIO_OWNER\n  CUSTOMER\n  GUEST\n}\n\n// Unified User Model\n// Replaces separate StudioOwner and Customer tables\nmodel User {\n  id            String    @id @default(cuid())\n  email         String    @unique\n  emailVerified DateTime? // NULL until magic link clicked or OAuth verified\n  password      String? // NULL = passwordless account\n  name          String?\n  phone         String? // Optional, collected progressively\n  image         String?\n\n  // Primary role (users can have multiple via UserRoleAssignment)\n  primaryRole UserRole @default(CUSTOMER)\n\n  // Account status\n  isActive    Boolean @default(true)\n  isSuspended Boolean @default(false)\n\n  // Relations\n  newAccounts  NewAccount[] // OAuth accounts\n  newSessions  NewSession[] // Active sessions\n  roles        UserRoleAssignment[] // Multiple roles possible\n  ownedStudios StudioOwnership[] // Studio ownership records\n  newBookings  NewBooking[] // All bookings\n  newFavorites Studio[]             @relation(\"UserFavorites\")\n  auditLogs    AuditLog[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([email])\n  @@index([primaryRole])\n  @@map(\"users\")\n}\n\n// OAuth Account for User model (separate from old Account)\nmodel NewAccount {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String? @db.Text\n  access_token      String? @db.Text\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String? @db.Text\n  session_state     String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@map(\"new_accounts\")\n}\n\n// Session for User model (separate from old Session)\nmodel NewSession {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"new_sessions\")\n}\n\n// RBAC - Multiple Roles per User\nmodel UserRoleAssignment {\n  id     String   @id @default(cuid())\n  userId String\n  role   UserRole\n\n  // Optional: Role can be scoped to specific resource\n  studioId String? // If role is scoped to a studio\n\n  // Audit trail\n  grantedBy String? // Who granted this role\n  grantedAt DateTime  @default(now())\n  expiresAt DateTime? // Optional: time-limited roles\n\n  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  studio Studio? @relation(fields: [studioId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, role, studioId])\n  @@index([userId])\n  @@index([studioId])\n  @@map(\"user_role_assignments\")\n}\n\n// Studio Ownership - Multiple Owners per Studio\nmodel StudioOwnership {\n  id       String @id @default(cuid())\n  userId   String\n  studioId String\n\n  // Ownership details\n  canTransfer Boolean @default(false) // Can transfer ownership\n\n  // Team invitation (future)\n  invitedBy  String?\n  invitedAt  DateTime  @default(now())\n  acceptedAt DateTime?\n\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  studio Studio @relation(fields: [studioId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, studioId])\n  @@index([userId])\n  @@index([studioId])\n  @@map(\"studio_ownership\")\n}\n\n// Magic Link Tokens (Passwordless Auth)\nmodel MagicLinkToken {\n  id        String   @id @default(cuid())\n  token     String   @unique // 64 hex chars (32 bytes)\n  email     String\n  expiresAt DateTime // 15 minutes from creation\n  used      Boolean  @default(false) // One-time use\n\n  createdAt DateTime @default(now())\n\n  @@index([email])\n  @@index([token])\n  @@index([expiresAt])\n  @@map(\"magic_link_tokens\")\n}\n\n// New Booking Model (links to User instead of Customer)\nmodel NewBooking {\n  id         String  @id @default(cuid())\n  studioId   String\n  serviceId  String?\n  customerId String // References User now\n\n  // Customer info (denormalized for studio convenience)\n  customerName  String\n  customerEmail String\n  customerPhone String? // Optional\n\n  // Booking details\n  preferredDate String\n  preferredTime String\n  message       String? @db.Text\n\n  // GDPR Art. 9 Compliance (Health Data)\n  explicitHealthConsent    Boolean?  @default(false)\n  healthConsentGivenAt     DateTime?\n  healthConsentText        String?   @db.Text\n  healthConsentWithdrawnAt DateTime?\n\n  // Status\n  status BookingStatus @default(PENDING)\n\n  // Confirmation audit\n  confirmedBy String?\n  confirmedAt DateTime?\n  cancelledBy String?\n  cancelledAt DateTime?\n\n  // Relations\n  studio   Studio   @relation(fields: [studioId], references: [id], onDelete: Cascade)\n  service  Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)\n  customer User     @relation(fields: [customerId], references: [id], onDelete: SetNull)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([studioId])\n  @@index([customerId])\n  @@index([customerEmail])\n  @@index([status])\n  @@index([createdAt])\n  @@map(\"new_bookings\")\n}\n\n// Audit Log (GDPR Compliance)\nmodel AuditLog {\n  id         String  @id @default(cuid())\n  userId     String? // Who performed the action\n  action     String // e.g., \"BOOKING_CREATE\", \"STUDIO_UPDATE\"\n  resource   String // e.g., \"booking\", \"studio\"\n  resourceId String // ID of affected resource\n  metadata   Json? // Additional context\n  ipAddress  String? // Anonymized (hash last octet)\n  userAgent  String?\n\n  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)\n\n  createdAt DateTime @default(now())\n\n  @@index([userId])\n  @@index([resource, resourceId])\n  @@index([createdAt])\n  @@map(\"audit_logs\")\n}\n\n// TimeSlot Model\n// Represents available appointment time slots for studios/services\nmodel TimeSlot {\n  id        String  @id @default(cuid())\n  studioId  String\n  serviceId String? // Optional: slot can be for specific service or general availability\n\n  // Time slot details\n  startTime DateTime\n  endTime   DateTime\n\n  // Availability status\n  isAvailable Boolean @default(true) // Can be booked\n  isBooked    Boolean @default(false) // Already booked\n\n  // Optional: linked booking\n  bookingId String? @unique\n\n  // Relations\n  studio  Studio   @relation(fields: [studioId], references: [id], onDelete: Cascade)\n  service Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([studioId])\n  @@index([serviceId])\n  @@index([startTime])\n  @@index([isAvailable, isBooked])\n  @@index([studioId, startTime, isAvailable])\n  @@map(\"time_slots\")\n}\n\n// BlockedTime Model\n// Represents blocked time periods in the calendar (breaks, closed hours, etc.)\nmodel BlockedTime {\n  id        String   @id @default(cuid())\n  studioId  String\n  startTime DateTime\n  endTime   DateTime\n  reason    String? // Optional reason: \"Mittagspause\", \"Pause\", \"Privat\"\n  isAllDay  Boolean  @default(false) // Full day block\n\n  // Relations\n  studio Studio @relation(fields: [studioId], references: [id], onDelete: Cascade)\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([studioId])\n  @@index([startTime])\n  @@index([studioId, startTime])\n  @@map(\"blocked_times\")\n}\n",
  "inlineSchemaHash": "31ef5468c5795f714161dffc4e3db4fe9b9767dbbffc460cba956b8bd7dc5cbf",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"StudioOwner\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToStudioOwner\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToStudioOwner\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"studio_owners\"},\"Customer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToCustomer\"},{\"name\":\"favorites\",\"kind\":\"object\",\"type\":\"Studio\",\"relationName\":\"CustomerFavorites\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"customers\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"StudioOwner\",\"relationName\":\"AccountToStudioOwner\"}],\"dbName\":\"accounts\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"StudioOwner\",\"relationName\":\"SessionToStudioOwner\"}],\"dbName\":\"sessions\"},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification_tokens\"},\"EmailVerificationToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"used\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"email_verification_tokens\"},\"PasswordResetToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"used\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"password_reset_tokens\"},\"Studio\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postalCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"openingHours\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"services\",\"kind\":\"object\",\"type\":\"Service\",\"relationName\":\"ServiceToStudio\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToStudio\"},{\"name\":\"favoritedBy\",\"kind\":\"object\",\"type\":\"Customer\",\"relationName\":\"CustomerFavorites\"},{\"name\":\"timeSlots\",\"kind\":\"object\",\"type\":\"TimeSlot\",\"relationName\":\"StudioToTimeSlot\"},{\"name\":\"newFavoritedBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserFavorites\"},{\"name\":\"ownerships\",\"kind\":\"object\",\"type\":\"StudioOwnership\",\"relationName\":\"StudioToStudioOwnership\"},{\"name\":\"roleAssignments\",\"kind\":\"object\",\"type\":\"UserRoleAssignment\",\"relationName\":\"StudioToUserRoleAssignment\"},{\"name\":\"newBookings\",\"kind\":\"object\",\"type\":\"NewBooking\",\"relationName\":\"NewBookingToStudio\"},{\"name\":\"blockedTimes\",\"kind\":\"object\",\"type\":\"BlockedTime\",\"relationName\":\"BlockedTimeToStudio\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"studios\"},\"Service\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studioId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studio\",\"kind\":\"object\",\"type\":\"Studio\",\"relationName\":\"ServiceToStudio\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToService\"},{\"name\":\"newBookings\",\"kind\":\"object\",\"type\":\"NewBooking\",\"relationName\":\"NewBookingToService\"},{\"name\":\"timeSlots\",\"kind\":\"object\",\"type\":\"TimeSlot\",\"relationName\":\"ServiceToTimeSlot\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"services\"},\"Booking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studioId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"serviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferredDate\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferredTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"explicitHealthConsent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"healthConsentGivenAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"healthConsentText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"healthConsentWithdrawnAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"studio\",\"kind\":\"object\",\"type\":\"Studio\",\"relationName\":\"BookingToStudio\"},{\"name\":\"service\",\"kind\":\"object\",\"type\":\"Service\",\"relationName\":\"BookingToService\"},{\"name\":\"customer\",\"kind\":\"object\",\"type\":\"Customer\",\"relationName\":\"BookingToCustomer\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"bookings\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"primaryRole\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isSuspended\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"newAccounts\",\"kind\":\"object\",\"type\":\"NewAccount\",\"relationName\":\"NewAccountToUser\"},{\"name\":\"newSessions\",\"kind\":\"object\",\"type\":\"NewSession\",\"relationName\":\"NewSessionToUser\"},{\"name\":\"roles\",\"kind\":\"object\",\"type\":\"UserRoleAssignment\",\"relationName\":\"UserToUserRoleAssignment\"},{\"name\":\"ownedStudios\",\"kind\":\"object\",\"type\":\"StudioOwnership\",\"relationName\":\"StudioOwnershipToUser\"},{\"name\":\"newBookings\",\"kind\":\"object\",\"type\":\"NewBooking\",\"relationName\":\"NewBookingToUser\"},{\"name\":\"newFavorites\",\"kind\":\"object\",\"type\":\"Studio\",\"relationName\":\"UserFavorites\"},{\"name\":\"auditLogs\",\"kind\":\"object\",\"type\":\"AuditLog\",\"relationName\":\"AuditLogToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"users\"},\"NewAccount\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NewAccountToUser\"}],\"dbName\":\"new_accounts\"},\"NewSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NewSessionToUser\"}],\"dbName\":\"new_sessions\"},\"UserRoleAssignment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"studioId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grantedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grantedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserRoleAssignment\"},{\"name\":\"studio\",\"kind\":\"object\",\"type\":\"Studio\",\"relationName\":\"StudioToUserRoleAssignment\"}],\"dbName\":\"user_role_assignments\"},\"StudioOwnership\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studioId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"canTransfer\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"invitedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"invitedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"acceptedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudioOwnershipToUser\"},{\"name\":\"studio\",\"kind\":\"object\",\"type\":\"Studio\",\"relationName\":\"StudioToStudioOwnership\"}],\"dbName\":\"studio_ownership\"},\"MagicLinkToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"used\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"magic_link_tokens\"},\"NewBooking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studioId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"serviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferredDate\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferredTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"explicitHealthConsent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"healthConsentGivenAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"healthConsentText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"healthConsentWithdrawnAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"confirmedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confirmedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelledBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cancelledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"studio\",\"kind\":\"object\",\"type\":\"Studio\",\"relationName\":\"NewBookingToStudio\"},{\"name\":\"service\",\"kind\":\"object\",\"type\":\"Service\",\"relationName\":\"NewBookingToService\"},{\"name\":\"customer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NewBookingToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"new_bookings\"},\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resource\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resourceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AuditLogToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"audit_logs\"},\"TimeSlot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studioId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"serviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isAvailable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isBooked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studio\",\"kind\":\"object\",\"type\":\"Studio\",\"relationName\":\"StudioToTimeSlot\"},{\"name\":\"service\",\"kind\":\"object\",\"type\":\"Service\",\"relationName\":\"ServiceToTimeSlot\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"time_slots\"},\"BlockedTime\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studioId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isAllDay\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"studio\",\"kind\":\"object\",\"type\":\"Studio\",\"relationName\":\"BlockedTimeToStudio\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"blocked_times\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

